import java.util.*;
import tester.*;

/**
 * A class that defines a new permutation code, as well as methods for encoding
 * and decoding of the messages that use this code.
 */
public class PermutationCode {
  // The original list of characters to be encoded
  ArrayList<Character> alphabet = new ArrayList<Character>(
      Arrays.asList('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
          'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'));

  ArrayList<Character> code = new ArrayList<Character>(26);

  // A random number generator
  Random rand = new Random();

  // Create a new instance of the encoder/decoder with a new permutation code
  PermutationCode() {
    this.code = this.initEncoder();
  }

  // Create a new instance of the encoder/decoder with the given Random
  PermutationCode(Random r) {
    this.rand = r;
  }

  // Create a new instance of the encoder/decoder with the given code
  PermutationCode(ArrayList<Character> code) {
    this.code = code;
  }

  // Initialize the encoding permutation of the characters
  ArrayList<Character> initEncoder() {
    // copy of alphabet
    ArrayList<Character> output = new ArrayList<Character>();
    ArrayList<Character> chars = new ArrayList<Character>(26);
    for (int i = 0; i < 26; i++) {
      chars.add(this.alphabet.get(i));
    }
    // continue randomly moving chars until copy is empty
    while (chars.size() > 0) {
      output.add(chars.remove(this.rand.nextInt(chars.size())));
    }
    return output;
  }

  // produce an encoded String from the given String
  String encode(String source) {
    String output = "";
    for (int i = 0; i < source.length(); i++) {
      char curr = source.charAt(i);
      output += this.code.get(this.alphabet.indexOf(curr));
    }
    return output;
  }

  // produce a decoded String from the given String
  String decode(String code) {
    String output = "";
    for (int i = 0; i < code.length(); i++) {
      char curr = code.charAt(i);
      output += this.alphabet.get(this.code.indexOf(curr));
    }
    return output;
  }
}

class ExamplesPermutationCode {
  PermutationCode pc;
  ArrayList<Character> alphabet = new ArrayList<Character>(
      Arrays.asList('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
          'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'));
  ArrayList<Character> code1 = new ArrayList<Character>(
      Arrays.asList('p', 's', 'c', 'o', 'r', 't', 'u', 'i', 'k', 'q', 'v', 'e', 'f', 'x', 'n', 'j',
          'y', 'w', 'z', 'd', 'a', 'b', 'g', 'm', 'l', 'h'));

  void testInitEncoder(Tester t) {
    Random rand = new Random(5);
    pc = new PermutationCode(rand);
    t.checkExpect(pc.initEncoder(), this.code1);
  }
  
  void testEncode(Tester t) {
    pc = new PermutationCode(this.code1);
    t.checkExpect(this.pc.encode("fundies"), "taxokrz");
    t.checkExpect(this.pc.encode("hello"), "ireen");
  }
  
  void testDecode(Tester t) {
    pc = new PermutationCode(this.code1);
    t.checkExpect(this.pc.decode("taxokrz"), "fundies");
    t.checkExpect(this.pc.decode("ireen"), "hello");
  }
}
